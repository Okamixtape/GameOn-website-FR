---
interface Props {
  currentPath?: string;
}

const { currentPath = Astro.url.pathname } = Astro.props;

const navItems = [
  { label: 'Accueil', href: '/' },
  { label: 'Détails', href: '/details' },
  { label: 'À propos', href: '/about' },
  { label: 'Contact', href: '/contact' },
] as const;
---

<header class="sticky top-0 z-50 bg-zinc-900 border-b border-zinc-800 shadow-md" role="banner">
  <div class="container mx-auto px-4 py-4">
    <nav class="flex items-center justify-between" aria-label="Navigation principale">
      <!-- Logo + Texte -->
      <a href="/" class="flex items-center gap-2" aria-label="GameOn - Accueil">
        <img 
          src="/Logo.png" 
          alt="Logo GameOn" 
          width="65"
          height="60"
          class="h-12 w-auto md:h-15"
        />
        <span class="text-xl font-bold text-white md:text-2xl">GameOn</span>
      </a>

      <!-- Navigation Desktop -->
      <ul class="hidden md:flex md:items-center md:gap-8">
        {navItems.map(item => (
          <li>
            <a 
              href={item.href}
              class={`text-white hover:text-red-500 transition-colors font-medium focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 focus:ring-offset-zinc-900 rounded px-2 py-1 ${
                currentPath === item.href ? 'text-red-500' : ''
              }`}
              aria-current={currentPath === item.href ? 'page' : undefined}
            >
              {item.label}
            </a>
          </li>
        ))}
      </ul>

      <!-- Bouton Hamburger Mobile -->
      <button
        id="mobile-menu-button"
        type="button"
        class="md:hidden text-white hover:text-red-500 transition-colors p-2 focus:outline-none focus:ring-2 focus:ring-red-500 rounded"
        aria-expanded="false"
        aria-controls="mobile-menu"
        aria-label="Menu de navigation"
      >
        <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
        </svg>
      </button>
    </nav>

    <!-- Menu Mobile -->
    <div
      id="mobile-menu"
      class="hidden md:hidden absolute top-full left-0 right-0 bg-zinc-900 border-t border-zinc-800 shadow-lg"
      role="menu"
    >
      <ul class="flex flex-col py-4">
        {navItems.map(item => (
          <li role="none">
            <a 
              href={item.href}
              class={`block px-6 py-3 text-white hover:bg-zinc-800 hover:text-red-500 transition-colors focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-inset ${
                currentPath === item.href ? 'bg-zinc-800 text-red-500' : ''
              }`}
              role="menuitem"
              aria-current={currentPath === item.href ? 'page' : undefined}
            >
              {item.label}
            </a>
          </li>
        ))}
      </ul>
    </div>
  </div>
</header>

<script is:inline>
  // Toggle menu mobile
  const button = document.getElementById('mobile-menu-button');
  const menu = document.getElementById('mobile-menu');

  if (button && menu) {
    // Toggle au clic sur le bouton
    button.addEventListener('click', () => {
      const isExpanded = button.getAttribute('aria-expanded') === 'true';
      button.setAttribute('aria-expanded', String(!isExpanded));
      menu.classList.toggle('hidden');
    });

    // Fermer le menu en cliquant sur un lien
    menu.querySelectorAll('a').forEach(link => {
      link.addEventListener('click', () => {
        button.setAttribute('aria-expanded', 'false');
        menu.classList.add('hidden');
      });
    });

    // Fermer le menu en cliquant à l'extérieur
    document.addEventListener('click', (e) => {
      if (!button.contains(e.target) && !menu.contains(e.target)) {
        button.setAttribute('aria-expanded', 'false');
        menu.classList.add('hidden');
      }
    });

    // Fermer avec la touche Escape
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && button.getAttribute('aria-expanded') === 'true') {
        button.setAttribute('aria-expanded', 'false');
        menu.classList.add('hidden');
        button.focus(); // Retour focus sur bouton
      }
    });
  }
</script>
